{"version":3,"sources":["components/Ranking.js","actions/Ranking.js","containers/Ranking.js","containers/Nav.js","components/Nav.js","App.js","TodoList.js","reducers/shopping.js","reducers/Ranking.js","createStore.js","index.js"],"names":["Ranking","this","props","onMount","categoryId","nextProps","onUpdate","category","ranking","error","name","map","item","i","style","maxWidth","margin","Card","image","imageUrl","title","height","type","raised","color","fullWidth","href","url","code","React","Component","defaultProps","startRequest","payload","receiveData","response","finishRequest","fetchRanking","dispatch","getState","a","categories","shopping","find","id","replace","queryString","qs","stringify","appid","category_id","fetchJsonp","responce","json","data","console","log","connect","state","ownProps","actions","onClick","path","push","width","List","button","to","primary","App","className","paddingLeft","left","marginTop","padding","Switch","Route","component","render","Redirect","match","params","initialState","getRanking","itemLength","ResultSet","totalResultsReturned","index","Result","Code","Name","Url","Image","Medium","undefined","action","history","createBrowserHistory","store","reduxCreateStore","combineReducers","reducers","router","routerReducer","applyMiddleware","logger","thunk","routerMiddleware","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.44dac10e.chunk.js","sourcesContent":["// src/components/Ranking.js\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Card, { CardMedia, CardContent, CardActions } from 'material-ui/Card'; // 追加\nimport Typography from 'material-ui/Typography'; // 追加\nimport Button from 'material-ui/Button'; // 追加\n\nexport default class Ranking extends React.Component {\n  componentWillMount() {\n    this.props.onMount(this.props.categoryId);\n  }\n  componentWillReceiveProps(nextProps) {\n    if (this.props.categoryId !== nextProps.categoryId) {\n      this.props.onUpdate(nextProps.categoryId);\n    }\n  }\n\n  render() {\n    const { category, ranking, error } = this.props;\n\n    return (\n      <div>\n        {/* ランキングのタイトル（2の機能） */}\n        <h2>{\n          typeof category !== 'undefined'\n            ? `${category.name}のランキング`\n            : ''\n        }</h2>\n\n        {(() => {\n          if (error) {\n            // エラー表示\n            return <p>エラーが発生しました。リロードしてください。</p>;\n          } else if (typeof ranking === 'undefined') {\n            // リクエスト完了前\n            return <p>読み込み中...</p>;\n          } else {\n            return ranking.map((item, i) => (\n              <Card\n                key={`ranking-item-${item.code}`}\n                style={{ maxWidth: '500px', margin: '32px auto' }}\n              >\n                <CardMedia\n                  image={item.imageUrl}\n                  title={`${i + 1}位 ${item.name}`}\n                  style={{ height: '200px' }}\n                />\n                <CardContent>\n                  <Typography type=\"title\">\n                    {`${i + 1}位 ${item.name}`}\n                  </Typography>\n                </CardContent>\n                <CardActions>\n                  <Button\n                    raised\n                    color=\"secondary\"\n                    fullWidth\n                    href={item.url}\n                  >商品ページへ</Button>\n                </CardActions>\n              </Card>\n            ));\n          }\n        })()}\n      </div>\n    );\n  }\n}\nRanking.propTypes = {\n  categoryId: PropTypes.string.isRequired,\n  onMount: PropTypes.func.isRequired,\n  onUpdate: PropTypes.func.isRequired,\n\n  // category, ranking, errorの型を追加\n  category: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }),\n  ranking: PropTypes.arrayOf(\n    PropTypes.shape({\n      code: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      url: PropTypes.string.isRequired,\n      imageUrl: PropTypes.string.isRequired,\n    })\n  ),\n  error: PropTypes.bool.isRequired\n};\nRanking.defaultProps = {\n    categoryId: '1'\n};\n","// src/actions/Ranking.js\r\nimport fetchJsonp from \"fetch-jsonp\";\r\nimport qs from \"qs\";\r\nimport { replace } from \"react-router-redux\"; // 追加\r\n\r\nconst API_URL =\r\n  \"https://shopping.yahooapis.jp/ShoppingWebService/V1/json/categoryRanking\";\r\nconst APP_ID = \"dj00aiZpPWE4SGZQNHoxNWlhVSZzPWNvbnN1bWVyc2VjcmV0Jng9ZWM-\";\r\n\r\n// categoryをpayloadに含むように修正\r\nconst startRequest = (category) => ({\r\n  type: \"START_REQUEST\",\r\n  payload: { category },\r\n});\r\nconst receiveData = (category, error, response) => ({\r\n  type: \"RECEIVE_DATA\",\r\n  payload: { category, error, response },\r\n});\r\nconst finishRequest = (category) => ({\r\n  type: \"FINISH_REQUEST\",\r\n  payload: { category },\r\n});\r\n\r\n// ランキングを取得する\r\nexport const fetchRanking = (categoryId) => {\r\n  // getState関数でstate.shopping.categoriesにアクセスする\r\n  return async (dispatch, getState) => {\r\n    // カテゴリIDに対応するstate.shopping.categoriesの要素を取得\r\n    const categories = getState().shopping.categories;\r\n    const category = categories.find((category) => category.id === categoryId);\r\n    // 対応するデータがない場合はトップページへリダイレクト\r\n    if (typeof category === \"undefined\") {\r\n      dispatch(replace(\"/\"));\r\n      return;\r\n    }\r\n\r\n    dispatch(startRequest(category)); // categoryIdからcategoryに変更\r\n\r\n    const queryString = qs.stringify({\r\n      appid: APP_ID,\r\n      category_id: categoryId,\r\n    });\r\n    try {\r\n      const responce = await fetchJsonp(`${API_URL}?${queryString}`);\r\n      const data = await responce.json();\r\n      console.log(data);\r\n      dispatch(receiveData(category, null, data)); // categoryIdからcategoryに変更\r\n    } catch (err) {\r\n      dispatch(receiveData(category, err)); // categoryIdからcategoryに変更\r\n    }\r\n    // categoryIdからcategoryに変更\r\n    dispatch(finishRequest(category));\r\n  };\r\n};\r\n","// src/containers/Ranking.js\r\nimport { connect } from \"react-redux\";\r\nimport Ranking from \"../components/Ranking\";\r\nimport * as actions from \"../actions/Ranking\";\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  categoryId: ownProps.categoryId,\r\n\r\n  // カテゴリ情報、ランキング情報をRankingコンポーネントに渡す\r\n  category: state.Ranking.category,\r\n  ranking: state.Ranking.ranking,\r\n  error: state.Ranking.error,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onMount(categoryId) {\r\n    dispatch(actions.fetchRanking(categoryId));\r\n  },\r\n  onUpdate(categoryId) {\r\n    dispatch(actions.fetchRanking(categoryId));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Ranking);\r\n","// src/containers/Nav.js\nimport { connect } from 'react-redux';\nimport { push } from 'react-router-redux';\n\nimport Nav from '../components/Nav';\n\nconst mapStateToProps = state => ({\n  // state.shopping.categoriesをprops.categoriesに紐付け\n  categories: state.shopping.categories\n});\n\n// react-router-reduxのpushでページ遷移を発生させる\nconst mapDispatchToProps = dispatch => ({\n  onClick (path) {\n    dispatch(push(path));\n  }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Nav);\n","// src/components/Nav.js\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n// import { Link } from 'react-router-dom';\n\nimport Drawer from \"material-ui/Drawer\"; // 追加\nimport List, { ListItem, ListItemText } from \"material-ui/List\"; // 追加\n\nexport default function Nav({ categories, onClick }) {\n  // 遷移先パスの生成\n  //   - カテゴリIDが\"1\"の場合は /all\n  //   - それ以外は /category/カテゴリID\n  const to = (category) =>\n    category.id === \"1\" ? \"/all\" : `/category/${category.id}`;\n\n  return (\n    <Drawer type=\"permanent\">\n      <List style={{ width: 240 }}>\n        {categories.map((category) => (\n          <ListItem\n            button\n            key={`menu-item-${category.id}`}\n            onClick={() => onClick(to(category))}\n          >\n            <ListItemText primary={category.name} />\n          </ListItem>\n        ))}\n      </List>\n    </Drawer>\n  );\n}\nNav.propTypes = {\n  // state.shopping.categoriesの構造\n  categories: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  // onClick追加\n  onClick: PropTypes.func.isRequired,\n};\n","// src/App.js\nimport React, { Component } from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Ranking from \"./containers/Ranking\";\nimport Nav from \"./containers/Nav\";\nimport Reboot from \"material-ui/Reboot\"; // 追加\nimport AppBar from \"material-ui/AppBar\"; // 追加\nimport Toolbar from \"material-ui/Toolbar\"; // 追加\nimport Typography from \"material-ui/Typography\"; // 追加\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\" style={{ paddingLeft: 240 }}>\n        {\" \"}\n        {/* styleを追加 */}\n        {/* Rebootを追加 */}\n        <Reboot />\n        {/* ページタイトルを追加 */}\n        <AppBar style={{ left: 240 }}>\n          {\" \"}\n          {/* styleを追加 */}\n          <Toolbar>\n            <Typography type=\"title\" color=\"inherit\">\n              Yahoo!ショッピングランキング\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Nav />\n        {/* div要素を追加してstyleを指定 */}\n        <div style={{ marginTop: 64, padding: 32 }}>\n          <Switch>\n            <Route path=\"/all\" component={Ranking} />\n            <Route path=\"/category/1\" render={() => <Redirect to=\"/all\" />} />\n            <Route\n              path=\"/category/:id\"\n              render={({ match }) => <Ranking categoryId={match.params.id} />}\n            />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\r\n\r\nclass TodoList extends Component {\r\n  render() {\r\n    const list = this.props.tasks.map((todo) => {\r\n      return todo.id;\r\n    });\r\n    return (\r\n      <div className=\"TodoList\">\r\n        <ul>{list}</ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","// src/reducers/shopping.js\nconst initialState = {\n  // カテゴリ情報\n  // 本来はカテゴリID取得APIで取得すべき\n  categories: [\n    {\n      id: '1',\n      name: 'すべてのカテゴリ'\n    },\n    {\n      id: '2502',\n      name: 'パソコン、周辺機器'\n    },\n    {\n      id: '10002',\n      name: '本、雑誌、コミック'\n    }\n  ]\n};\n\nexport default () => initialState;\n","// src/reducers/Ranking.js\n\n// レスポンスからランキング情報だけを抜き出す\nconst getRanking = response => {\n  const ranking = [];\n  const itemLength = response.ResultSet.totalResultsReturned\n  for (let index = 0; index < itemLength; index++) {\n    const item = response.ResultSet['0'].Result[index + ''];\n    ranking.push({\n      code: item.Code,\n      name: item.Name,\n      url: item.Url,\n      imageUrl: item.Image.Medium\n    })\n  }\n  return ranking;\n};\n\n// 初期状態\nconst initialState = {\n  // categoryId: undefined,\n  // categoryIdからcategoryに変更\n  category: undefined,\n  ranking: undefined,\n  error: false\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    // リクエスト開始時に状態をリセット\n    case 'START_REQUEST':\n      return {\n        // categoryを状態に保持\n        category: action.payload.category,\n        ranking: undefined,\n        error: false\n      };\n\n    // データ受信\n    case 'RECEIVE_DATA':\n      return action.payload.error\n        ? { ...state, error: true }\n        : {\n            ...state,\n            ranking: getRanking(action.payload.response)\n          };\n\n    default:\n      return state;\n  }\n}\n","// src/createStore.js\r\nimport {\r\n  // 名前が被ってしまうので別名でimportする\r\n  createStore as reduxCreateStore,\r\n  combineReducers,\r\n  applyMiddleware,\r\n} from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport { routerReducer, routerMiddleware } from \"react-router-redux\";\r\nimport thunk from \"redux-thunk\"; // 追加\r\nimport * as reducers from \"./reducers\";\r\n\r\n// historyはsrc/index.jsから渡すようにする\r\nexport default function createStore(history) {\r\n  return reduxCreateStore(\r\n    combineReducers({\r\n      ...reducers,\r\n      // react-router-reduxのReducer\r\n      router: routerReducer,\r\n    }),\r\n    applyMiddleware(\r\n      logger,\r\n      thunk,\r\n      // react-router-reduxのRedux Middleware\r\n      routerMiddleware(history)\r\n    )\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport TodoList from \"./TodoList\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ConnectedRouter } from \"react-router-redux\"; // 追加\nimport createStore from \"./createStore\"; // 追加\nimport { Provider } from \"react-redux\"; // 追加\nimport createBrowserHistory from \"history/createBrowserHistory\"; // 追加\n//import createBrowserHistory from \"history/createHashHistory\"; // 追加\n\n// import { createStore, combineReducers, applyMiddleware } from \"redux\"; // 追加\n// import logger from \"redux-logger\"; // 追加\n\n// import * as reducers from \"./reducers\"; // 追加\n\nconst Hello = (props) => {\n  return <div>{props.name}</div>;\n};\n\nconst Test = (props) => {\n  return <div>{console.log({ ...props })}</div>;\n};\n\nconst tasks = [\n  { title: \"odo1\", id: 0 },\n  { title: \"todo2\", id: 1 },\n];\nconst profile = {\n  name: \"shimizu\",\n  birthDay: \"1978/0613\",\n};\n\n// historyのインスタンスを生成\nconst history = createBrowserHistory();\n\n// Storeの生成\nconst store = createStore(history);\n\nReactDOM.render(\n  <Provider store={store}>\n    {/*\n      Linkコンポーネントなどが動作するように\n      react-router-domのRouterではなく\n      react-router-reduxのConnectedRouterを使う\n    */}\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}